-- Testbench generated by script.
-- Date: Seg,05/05/2014-11:48:02
-- Author: 
-- Comments: Test of unidade_a2 entity..
 
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

-- print messages.
use std.textio.all;
use ieee.std_logic_textio.all;

entity unidade_a2_tb is
end unidade_a2_tb;

architecture estrutural of unidade_a2_tb is
  --  Component declaration.
  component unidade_a2
	port (x, y, z, w: in <<type>>; s: out <<type>>);
  end component;
  --  Specifies the entity which is linked with the component. (Especifica qual a entidade está vinculada com o componente).
  for unidade_a2_0: unidade_a2 use entity work.unidade_a2;
      signal s_t_x, s_t_y, s_t_z, s_t_w, s_t_s: <<type>>;
  
  -- procedure print messages definition.
  procedure print_message( pi_s_t_x, pi_s_t_y, pi_s_t_z, pi_s_t_w: <<type>>;  po_s_t_s: <<type>>;  pe_s: <<type>>) is
  variable line_out: line;
  begin
    write(line_out, string'("   At time "));
    write(line_out, now);
    write(line_out, string'(", inputs ["));
    write(line_out, string'(" s_t_x: "));
	write(line_out, pi_s_t_x);
	 write(line_out, string'(" s_t_y: "));
	write(line_out, pi_s_t_y);
	 write(line_out, string'(" s_t_z: "));
	write(line_out, pi_s_t_z);
	 write(line_out, string'(" s_t_w: "));
	write(line_out, pi_s_t_w);
	
    write(line_out, string'("]"));
    
    write(line_out, string'(", outputs ["));
    write(line_out, string'(" s_t_s: "));
	write(line_out, string'("(generated: "));
	write(line_out, po_s_t_s);
	write(line_out, string'(", expected: "));
	write(line_out, pe_s);
	write(line_out, string'(")"));
	
    write(line_out, string'("]"));
    if (s_t_s = pe_s)  then
        write(line_out, string'(" [OK]"));
    else
        write(line_out, string'(" [Error]"));
    end if;
    writeline(output, line_out);
  end procedure print_message;
  
  begin
    --  Component instantiation.
	--  port map (<<p_in_1>> => <<s_t_in_1>>)
	unidade_a2_0: unidade_a2 port map ( x=>s_t_x, y=>s_t_y, z=>s_t_z, w=>s_t_w, s=>s_t_s);

    --  Process that works.
    process
        -- line to print.
        variable line_out: line;
		-- A record is created with the inputs and outputs of the entity.
		-- (<<entrada1>>, <<entradaN>>, <<saida1>>, <<saidaN>>)
		type pattern_type is record
			-- inputs.
			 vi_x, vi_y, vi_z, vi_w: <<type>>;
			-- outputs.
			 vo_s: <<type>>;
		end record;

		--  The input patterns are applied (injected) to the inputs of the entity under test.
		type pattern_array is array (natural range <>) of pattern_type;
		-- Test cases.
		constant patterns : pattern_array :=
		(
			(test cases with 5 columns, '0'...),
			(...)
		);
		begin
        -- Message starting...
        write(line_out, string'("Running testbench: unidade_a2_tb."));
        writeline(output, line_out);
        write(line_out, string'(" Testing entity: unidade_a2."));
        writeline(output, line_out);
		-- Injects the inputs and check thte outputs.
		for i in patterns'range loop
			-- Injects the inputs.
			s_t_x <= patterns(i).vi_x;
			s_t_y <= patterns(i).vi_y;
			s_t_z <= patterns(i).vi_z;
			s_t_w <= patterns(i).vi_w;
			
			-- wait for results.
			wait for 1 ns;
			-- Checks the result with the expected output in the pattern.
            print_message( s_t_x, s_t_y, s_t_z, s_t_w,  s_t_s,  patterns(i).vo_s);
			assert (s_t_s = patterns(i).vo_s)	report "Valor de s_t_s não confere com o resultado esperado." severity error;
			
		end loop;
        
        write(line_out, string'("Execution of unidade_a2_tb finished."));
        writeline(output, line_out);      
		assert false report "End of test." severity note;
		--  Wait forever; Isto finaliza a simulação.
		wait;
	end process;
end estrutural;
